# -*- coding: utf-8 -*-
"""Numpy Dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LzRM55jl_ujKYe37S5yVeRuhaehh3jBr
"""

import numpy as np

url = 'https://raw.githubusercontent.com/alura-cursos/numpy/dados/apples_ts.csv'

dado = np.loadtxt(url,delimiter=',',usecols=np.arange(1,88,1))

dado.ndim

dado.size

dado.shape

dado.T

dados_transposto = dado.T

datas = dados_transposto[:,0]

precos = dados_transposto[:,1:6]

import matplotlib.pyplot as plt

datas = np.arange(1,88,1)

plt.plot(datas,precos[:,0])

Moscow = precos[:,0]
Kaliningrad = precos[:,1]
Petersburg = precos[:,2]
Krasnodar = precos[:,3]
Ekaterinburg = precos[:,4]

Moscow_ano1 = Moscow[0:12]
Moscow_ano2 = Moscow[12:24]
Moscow_ano3 = Moscow[24:36]
Moscow_ano4 = Moscow[36:48]

plt.plot(np.arange(1,13,1),Moscow_ano1)
plt.plot(np.arange(1,13,1),Moscow_ano2)
plt.plot(np.arange(1,13,1),Moscow_ano3)
plt.plot(np.arange(1,13,1),Moscow_ano4)
plt.legend(['ano1','ano2','ano3','ano4'])

np.array_equal(Moscow_ano3,Moscow_ano4)

np.allclose(Moscow_ano2,Moscow_ano1,10)

plt.plot(datas,Kaliningrad)

sum(np.isnan(Kaliningrad))

(Kaliningrad[3]+Kaliningrad[5])/2

Kaliningrad[4] = np.mean([Kaliningrad[3],Kaliningrad[5]])

np.mean(Moscow)

np.mean(Kaliningrad)

plt.plot(datas,Moscow)

"""

```y=ax+b
y=ax+b
```

"""

x = datas

y = 2*x+80

plt.plot(datas,Moscow)
plt.plot(x,y)

np.sqrt(np.sum(np.power(Moscow-y,2)))

y = 0.52*x+80

plt.plot(datas,Moscow)
plt.plot(x,y)

np.sqrt(np.sum(np.power(Moscow-y,2)))

np.linalg.norm(Moscow-y)

"""a = coeficiente angular;
n = numero de elementos;
Y = Moscow;
X = datas
"""

Y= Moscow
X= datas
n = np.size(Moscow)

a = (n*np.sum(X * Y) - np.sum(X) * np.sum(Y))/(n*np.sum(X**2) - (np.sum(X)**2))

b = np.mean(Y) - a*np.mean(X)

y = a*X+b

np.linalg.norm(Moscow-y)

plt.plot(datas,Moscow)
plt.plot(x,y)
plt.plot(41.5,41.5*a+b,'*r')
plt.plot(100,100*a+b,'*r')

np.random.randint(low=40,high=100,size=100)

coef_angulares = np.random.uniform(low=0.10,high=0.90,size=100)

norma = np.array([])
for i in range(100):
  norma = np.append(norma,np.linalg.norm(Moscow-(coef_angulares[i]*X+b)))

norma

coef_angulares[1]

np.random.uniform(low=0.10,high=0.90,size=100)

np.random.seed(16)
np.random.uniform(low=0.10,high=0.90,size=100)

np.random.seed(84)
coef_angulares = np.random.uniform(low=0.10,high=0.90,size=100)
norma = np.array([])
for i in range(100):
  norma = np.append(norma, np.linalg.norm(Moscow-(coef_angulares[i]*X+b)))

norma

coef_angulares

dados = np.column_stack([norma,coef_angulares])

dados.shape

np.savetxt('dados.csv',dados,delimiter=',')

